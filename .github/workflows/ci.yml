name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '17'
#          java-package: jdk
#
#      - name: Build with Maven
#        run: mvn clean package install
#
#  sonarqube:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - uses: actions/checkout@master
#        with:
#          fetch-depth: 0
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#      # Setup sonar-scanner
#      - name: Setup SonarQube
#        uses: warchant/setup-sonar-scanner@v7
#
#      - name: Build with Maven
#        run: mvn clean package install
#
#      - name: SonarQube Scan
#        run: sonar-scanner -Dsonar.host.url=https://sonarcloud.io
#                          -Dsonar.organization=olgavit15
#                          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#                          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#                          -Dsonar.projectName=DevOps
#                          -Dsonar.sources=$GITHUB_WORKSPACE
#                          -Dsonar.branch.name=$GITHUB_HEAD_REF
#                          -Dsonar.java.binaries=target
#                          -Dsonar.jacoco.reportPaths=target/jacoco.exec
#                          -Dsonar.exclusions=**/ItemApplication.java,**/WebConfig.java,**/src/test/**
#                          -Dsonar.qualitygate.wait=true
#
#  test:
#    runs-on: ubuntu-latest
#    needs: sonarqube
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '17'
#          java-package: jdk
#
#      - name: Run tests
#        run: mvn test
#
#  docker:
#    runs-on: ubuntu-latest
#    needs: test
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Docker image
#        run: |
#          docker build -t vvo15/my-image-server1:${{ github.sha }} -f Dockerfile .
#
#      - name: Tag Docker image
#        run: |
#          docker tag vvo15/my-image-server1:${{ github.sha }} vvo15/my-image-server1:latest
#
#      - name: Push Docker image
#        run: |
#          docker push vvo15/my-image-server1
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy COI VM
        id: deploy-coi
        uses: yc-actions/yc-coi-deploy@v1.0.1
        env:
          YC_OAUTH_TOKEN: ${{ secrets.YC_OAUTH_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

        with:
          yc-sa-json-credentials: ${{ secrets.YC_CREDENTIALS }}
          vm-service-account-id: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          vm-cores: 2
          vm-memory: 2048Mb
          vm-name: my-app-vm
          vm-disk-size: 16Gb
          entrypoint: 'dist/index.handler'
          vm-subnet-id: ${{ secrets.YC_SUBNET_ID }}
          docker-compose-path: docker-compose.yml
          user-data-path: user_data.txt

      - name: Output VM details
        run: |
          echo "VM deployment finished."
          
          
